html {
  box-sizing: border-box;
  font-size: 16px;
  font-family: sans-serif;
  scroll-behavior: smooth;
}

*,
*::after,
*::before {
  box-sizing: inherit;
}

a[href="#top"] {
  margin: 1rem;
  display: block;
  font-size: 2rem;
  text-align: center;
  text-decoration: none;
}

p {
  margin: 0;
}

h2 {
  margin-top: 50vh;
  text-align: center;
}

img {
  margin: auto;
  display: block;
  max-width: 100%;
  height: auto;
}

.menu {
  margin-bottom: 100vh;
  font-size: 125%;
}

.menu li {
  margin-bottom: 1rem;
}

.container {
  margin: 0 auto;
  width: 80%;
  height: 80vh;
  background-color: #222;
  border: medium solid #000;
}

.item {
  padding: 1rem;
  font-size: 1.25rem;
  background-color: #666;
  border: medium solid #999;
}

/* Empezamos con los ejercicios a partir de aca, lo anterior es copiado */

.sub-item {
  padding: 1rem;
  background-color: #ddd;
  border: medium solid #ccc;
}

.grid-explicit {
  display: grid;
  /* Grid de 3cx3r */
  grid-template-columns: 50% 100px 1fr; /* (1 Fr, es el espacio sobrante */
  grid-template-rows: 2rem 20vh 30%; /* Cada unidad es para unica fila, 2rem fila 1, 20vh fila 2, */
  /* Grid de 5cx4r */
  grid-template-columns: repeat(5, 20%);
  grid-template-rows: repeat(4, auto);
  grid-template-rows: repeat(4, 25%);
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(4, 1fr);
  /* Grid de 4cx5r */
  grid-template-columns: 20% repeat(2, 30%) 20%;
  grid-template-rows: repeat(5, auto);
  grid-column-gap: 2rem;
  grid-row-gap: 1rem;
  grid-gap: 100px 0px; /* Grid-column-woe-grap y grid-gap Estan depresiadas, ahora se usa GAP */
  /* Gap: row column */
  gap: 1vh 1vw;
  gap: 0;
}

.grid-explicit .item:nth-child(10) {
  color: cyan;
  grid-row-start: 2;
  grid-row-end: 3;
  grid-column-start: 2;
  grid-column-end: 3;
  grid-row: 2 / 3; /* Short */
  grid-column: 3 / 5; /* Short */

  grid-area: 2 / 3 / 3 / 5; /* Combinacion de los 2 Short. Empieza por Grid Row Start, End. Grid-column start, End. */
}

.grid-explicit .item:nth-child(12) {
  color: red;
  grid-row: span 2;
  grid-column: span 3;
}

.grid-explicit .item:nth-child(15) {
  color: yellow;
  grid-row: 1 / span 2;
  grid-column: 1 / span 2;
}

.grid-line-names {
  display: grid;
  /* Grid de 3cx3r */
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);
  grid-template-columns: [linea-c1] 1fr [linea-c2] 1fr [linea-c3] 1fr [linea-c4];
  grid-template-rows: [linea-r1] 1fr [linea-r2] 1fr [linea-r3] 1fr [linea-r4];
  grid-template-rows: [linea-r1] auto [linea-r2] auto [linea-r3] auto [linea-r4];
}

.grid-line-names .item:nth-child(3) {
  color: cyan;
  grid-row: linea-r3 / linea-r4;
  grid-column: linea-c1 / linea-c4;
  /* grid-area: linea-r3 / linea-r4 / linea-c1 / linea-c4; NO FUNCA */
}

.grid-areas {
  display: grid;
  /* Grid de 2cx3r */
  grid-template-columns: 1fr 200px;
  grid-template-rows: 100px repeat(2, 1fr) 60px;
  grid-template-areas:
    "header header"
    "content sidebar"
    "content ." /* . Punto es para dejar vacia  */
    "footer  footer";
}

.header {
  grid-area: header;
}

.content {
  grid-area: content;
}

.sidebar {
  grid-area: sidebar;
}

.footer {
  grid-area: footer;
}

.grid-implicit {
  /* Grid de 4cx3r */
  width: 40%;
  display: grid;
  display: inline-grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(3, 150px);
}

.grid-flow {
  display: grid;
  /* Grid de 5cx3r */
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(3, 120px);
  grid-auto-flow: row; /* Por defecto */
  grid-auto-rows: 100px;
  grid-auto-flow: column;
  grid-auto-columns: 50px;
}

/* Grid-auto-rows / grid-auto-columns: En el ejemplo tenemos una grid de 5 x 3. Si ponemos mas elementos que los 15 que tiene la grid implicita, se van a seguir generando, con grid-auto-rows le decimos el tamaño que van a tener estos que se generan automaticamente, lo mismo con grid-auto-columns

grid-auto-flow: Si el elemento va a estar ordenados por 1 - 2 - 3 (en fila) o el columna de arriba hacia abajo */

/* Cuando el flujo de la grid es en columnas y colapsamos el numero de columnas definidas, se van a generar automaticamente, mas columnas. Pasa lo mismo con las filas, si ponemos mas filas de las que definimos, se van a generar filas.  */

.grid-flow-dense {
  display: grid;
  /* Grid de 5cx4r */
  /* Ponerle el dense a grid-auto-flow sirve para ocupar los espacios que queden vacios con los que tenemos delante. Estos retroceden para llenar el lugar. */
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(4, 150px);
  grid-auto-flow: row dense;
  grid-auto-flow: column dense;
}

/* .grid-flow-dense .item:nth-child(9) {
  color: cyan;
  grid-row: span 3;
  grid-column: span 3;
} */

.grid-flow-dense .item:nth-child(11) {
  color: cyan;
  grid-row: span 3;
  grid-column: span 3;
}

.grid-layers {
  display: grid;
  /* Grid de 4cx4r */
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 1fr);
}

.grid-layers .item:nth-child(1) {
  background-color: #dbea33;
  grid-column: 1 / 3;
  grid-row: 1 / 3;
}

.grid-layers .item:nth-child(2) {
  background-color: #497af8;
  grid-column: 3 / 5;
  grid-row: 1 / 3;
}

.grid-layers .item:nth-child(3) {
  background-color: #90e971;
  grid-column: 1 / 3;
  grid-row: 3 / 5;
}

.grid-layers .item:nth-child(4) {
  background-color: #f0952a;
  grid-column: 3 / 5;
  grid-row: 3 / 5;
}

.grid-layers .item:nth-child(5) {
  background-color: #c92af0;
  opacity: 0.75;
  grid-column: 2 / 4;
  grid-row: 2 / 4;
}

.grid-order {
  display: grid;
  /* Grid de 3cx2r */
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 1fr);
}

.grid-order .item:nth-child(1) {
  /* Valor por defecto es 0. Valores negativos y positivos. Aplica solo para dentro del flujo de la grid.
  Esto lo que hace es ordenar en la grid en base al order que le definamos. El order mas bajo es el que va a ir primero en el flujo.*/
  order: 1;
}

.grid-order .item:nth-child(2) {
  order: 2;
}

.grid-order .item:nth-child(5) {
  order: -1;
}

.grid-align {
  display: grid;
  /* Grid de 3cx2r */
  grid-template-columns: repeat(3, 200px);
  grid-template-rows: repeat(2, 200px);
  /* Justify-items: Es la propiedad que nos va a alinear los elementos. Trabajando desde X. */
  justify-items: stretch; /* Stretch significa estirar - Ocupa todo el espacio. Valor por defecto (No justify-content como flexbox.)  */
  justify-items: start;
  justify-items: end;
  justify-items: center;
  /* Align-items: Es la propiedad que nos va a alinear los elementos. Trabajando desde Y. */
  align-items: stretch; /* Valor por defecto */
  align-items: end;
  align-items: start;
  align-items: center;
}

.grid-align .item:nth-child(4) {
  /* Cuando queremos aplicar justify-items y align-items a solo cuadro de la grid. Usamos justify-self y align-self */
  justify-self: start;
  align-self: start;
}

.grid-align-tracks {
  display: grid;
  /* Grid de 3cx2r */
  grid-template-columns: repeat(3, 200px);
  grid-template-rows: repeat(2, 200px);
  /* Justify-content: Es la propiedad que nos va a alinear los TRACKS (toda una fila o columna) en el eje X. */
  justify-content: start;
  justify-content: end;
  justify-content: center;
  justify-content: space-between;
  justify-content: space-around;
  justify-content: space-evenly;
  /* Align-content: Es la propiedad que nos va a alinear los TRACKS en el eje Y. */
  align-content: start; /* Por defecto */
  align-content: end;
  align-content: center;
  align-content: space-between;
  align-content: space-around;
  align-content: space-evenly;
}

.grid-min-max {
  display: grid;
  /* Grid de 4cx?r */
  grid-template-columns: repeat(4, 1fr);
  grid-template-columns: repeat(4, minmax(100px, 200px));
  grid-template-columns: repeat(
    4,
    minmax(min-content, 200px)
  ); /* El valor menor va a ser el tamaño minimo del contenido */
  grid-template-columns: repeat(4, minmax(100px, min-content));
  grid-template-columns: repeat(4, minmax(100px, max-content));
  grid-template-columns: repeat(4, minmax(max-content, 200px));
  grid-template-columns: repeat(4, minmax(min-content, max-content));
}

.grid-repeat {
  display: grid;
  /* Grid de 4cx4r */
  grid-template-columns: repeat(
    4,
    10% 20% 30% 40%
  ); /* Se van a repetir 4 veces las columnas, una al lado de otra. */
  grid-template-columns: repeat(3, 10% 20% 30% 40%);
  grid-template-columns: repeat(2, 10% 20% 30% 40%);
  grid-template-columns: repeat(
    1,
    10% 20% 30% 40%
  ); /* Poniendo 1, se generan esas 4 columnas y luego pasan a la siguiente fila a realizar el mismo patron. */
  grid-template-rows: repeat(2, 10vh 20vh 30% 40%);
  grid-template-rows: repeat(2, 100px 200px);
  grid-auto-rows: repeat(
    2,
    100px 200px
  ); /* Esto no funciona. Repeat solo funciona en grid-template-columns/rows. */
  grid-auto-rows: 150px; /* Las filas que se generen fuera de las definidas. Tendran 150px de height*/
}

.grid-dynamics {
  /* Grid de 4cx?r */
  display: grid;
  grid-template-columns: repeat(4, 100px);
  /* Auto-fill: Rellena la grid con tracks generados dinámicamente */
  grid-template-columns: repeat(auto-fill, 100px);
  /* Auto-fit: Ajusta la grid con los tracks existentes */
  grid-template-columns: repeat(auto-fit, 100px);
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}

.grid-responsive {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1vh 1vw; /* Gap es la separacion entre los elementos. */
  gap: 0;
}

/* Anidacion de grid: Es para un elemento que es parte de una grid, tenga su propia grid con hijos.
nested = Anidada */

.grid-nested {
  display: grid;
  /* Grid de 3cx?r */
  grid-template-columns: repeat(3, 1fr);
}

.grid {
  display: grid;
  /* Grid de 3cx4r */
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(4, 1fr);
}

.subgrid {
  /* Para que la caracteristica de subgrid funcione es necesario hacer lo siguiente:
  1) Definir explicitamente el tamaño que ocupará el elemento que aplicara subgrid dentro del contenedor padre grid, es decir definir sus propiedades grid-column y grid-row
  2) Aplicar display grid al elemento que aplicara subgrid
  3) Aplicar el valor de subgrid a las columnas, a las filas o ambas depende de como se requiera
  */
  grid-column: span 3;
  grid-row: 1 / 3;
  display: grid;
  grid-template-columns: subgrid;
  grid-template-rows: subgrid;
}
