html {
  box-sizing: border-box;
  font-family: sans-serif;
  font-size: 16px;
  overflow-x: hidden;
}

*,
*::after,
*::before {
  box-sizing: inherit;
}

body {
  margin: 0;
}

img {
  max-width: 100%;
  height: auto;
}

.box {
  border: thick solid #000;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 5rem;
  width: 200px;
  height: 200px;
}

.card {
  border: thick solid #000;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 5rem;
  width: 600px;
  height: 400px;
}

.card img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: 0 50%;
}

/*
Transiciones
Transition-property (A la que le quiero aplicar una transicion)
Transition-duration (Cuanto tiempo va a durar)
Transition-timing-function: none (por defecto), Linear ease ease-in ease-out ease-in-out steps
Transition-delay (Un tiempo de espera antes que comienze la transicion)
Transition: Property duration timing-function delay
*/

.transitions .box {
  background-color: magenta;
  border-color: green;
  transition-property: background-color;
  transition-duration: 500ms;
  transition-timing-function: ease;
  transition-delay: 0.5s;
  transition: border-color 1s linear 0.5s;
  transition: all 2s ease-in-out 250ms; /* No saturar el all, por que "Baja el rendimiento de la app", eso es mentira. Pero es una mala practica por que puede generar algun salto por los cambios de transiciones, no solamente en el hover, sino que las esta haciendo tambien en las propiedades que tenemos aplicadas a la box desde el principio del documento. Ese es el detalle por la cual se considera mala practica */
  transition: background-color 2s ease-in-out 250ms,
    border-color 2s ease-in-out 250ms border-radius; /* Mejor hacerlas 1 x 1, por lo menos hasta que tengamos mejor dominio de CSS */
}

.transitions .box:hover {
  background-color: cyan;
  border-color: red;
  border-radius: 2rem;
  /* border-style: dashed; (No es animable, sin embargo hace el efecto*/
}

/*
Lista de etiquetas animables:
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties
*/

.transitions .card {
  transition: opacity 1s ease-out,
    border-color 3s steps(4)
      /* Steps es como pasos, si pones 3 serian 3 cambios */,
    filer 2s ease-in 1s, box-shadow 1.5s linear 2s;
}

.transitions .card:hover {
  opacity: 75%;
  border-color: orchid;
  filter: blur(0.15rem);
  box-shadow: 1rem 1rem 2rem 0.5rem #000;
}

.transitions .card img {
  transition: object-position 2s ease-in-out 3s;
}

/* La idea con este de arriba y de abajo lo que se queria era que la imagen tambien se mueva un poco hacia los lados, pero no el cuadrado, sino la imagen. Pero como en mi caso, la imagen esta 100% a la vista no se logra, tendria que quedar parte de la imagen fuera de foco para que se desplace  */
.transitions .card img:hover {
  object-position: 100% 50%;
}

/* Se hablo de que puede pasar que al recargar la paguina, se generen las animaciones de los efectos sin pasar por el estado hover. Esto es justamente por que, por lo general, no se entiende que cuando tu generas una propiedad en la lista de transiciones que vas a ejecutar, esa transicion no solo se va a dar en el cambio en el estado que le hayamos definido (en este caso el hover), sino que tambien van a actuar a la hora en que cargas el navegador.
Tenemos que entender que el transition finalmente al ser una propiedad de css, trabaja bajos las reglas del algoritmo de CSS (cascada, especificidad y herencia)
*/

.transform-2d img {
  transition: transform 2s ease-in-out;
}

.transform-2d img:hover {
  transform: none; /* Defecto */
  transform: translateX(4rem);
  transform: translateY(4rem);
  transform: translateY(-4rem);
  transform: translateZ(4rem);
  transform: translate(-4rem, 4rem);
  transform: translate(50%, 50%);
  transform: translate(-50%, -50%);
  transform: translate(-50%, 100px);
  transform: scaleX(2);
  transform: scaleY(0.5);
  transform: scaleZ(1.5);
  transform: scale(1.5, 1.5);
  transform: scale(-1, -1);
  transform: rotateX(60deg);
  transform: rotateX(90deg);
  transform: rotateY(60deg);
  transform: rotateY(90deg);
  transform: rotateZ(60deg);
  transform: rotateZ(-60deg);
  transform: rotateZ(360deg);
  transform: rotate(360deg);
  transform: skewX(20deg);
  transform: skewX(-50deg);
  transform: skewY(20deg);
  transform: skewY(-50deg);
  transform: skew(20deg, 20deg);
  /*
Matrix( scaleX(), skewY(), skewX(), scaleY(), traslateX(), traslateY() )
https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()
  */
  transform: matrix(1, 2, 2, 1, 20, 10);
  transform: translate(25%, -50%) rotate(240deg) skew(10deg, 20deg)
    scale(-0.5, -0.5);
}

.transform-3d {
  perspective: 10rem;
}

.transform-3d img {
  transition: transform 2s ease-in-out;
}

.transform-3d img:hover {
  transform: translateZ(4rem);
  transform: perspective(1000px) translateZ(4rem);
  transform: perspective(100rem) translateZ(4rem);
  transform: perspective(10rem) translateZ(4rem);
  transform: perspective(1rem) translateZ(4rem);
  transform: perspective(10rem) translateZ(4rem);
  transform: perspective(10rem) translateZ(-4rem);
  transform: translateZ(4rem);
  transform: translateZ(-4rem);
  transform: translate3d(2rem, 50%, -3rem);
  transform: scaleZ(1.5);
  transform: scale3d(2, 0.5, 3);
  transform: rotateX(60deg);
  transform: rotateY(60deg);
  transform: rotateY(-90deg);
  transform: rotate3d(1, 1, 1, 45deg);
  transform: rotate3d(1, 0.5, 0, -45deg);
  transform: rotate3d(-1, 2.5, -2, 60deg);
  transform: matrix3d(1, 0, 0, 0, 0, 1, 6, 0, 0, 0, 1, 0, 50, 100, 0, 1.1);
  transform: rotate3d(-1, 2.5, -2, 60deg);
  transform: rotate3d(-1, 2.5, -2, 60deg) translate3d(2rem, 50%, -3rem)
    scale3d(2, 0.5, 3);
}
/*
 https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d()
https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d()
*/

.transform-origin img {
  transition: transform 2s ease-in-out;
  /* transform-origin: x y z; */
  transform-origin: 50% 50% 0; /* Por defecto */
  transform-origin: 0 0;
  transform-origin: 0;
  transform-origin: top left;
  transform-origin: top right;
  transform-origin: bottom right;
  transform-origin: bottom left;
  transform-origin: top center;
  transform-origin: bottom center;
  transform-origin: center right;
  transform-origin: center left;
  transform-origin: center center;
  transform-origin: -2rem -3rem;
  transform-origin: 2rem 3rem;
  transform-origin: 2rem 75%;
  transform-origin: 25% 75%;
  transform-origin: -5% -5%;
}

.transform-origin img:hover {
  transform: rotate(360deg);
}

.flip-card-1,
.flip-card-2 {
  border: thick solid #000;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 5rem;
  width: 600px;
  height: 400px;

  position: relative;
  cursor: pointer;
  transition: transform 1s ease-in-out;
  perspective: 10rem;
  transform-style: flat; /* Va a establecer, si los hijos de un elemento que tiene perspectiva en 3d, (los hijos de la flip-card, son las flip-face). Va a determinar como se va a comportar en el espacio 3d.
  Por defecto, el valor es Flat, que hace que en el mismo plano trabajen los elemento hijos. Si queremos que los hijos tengan su propia perspectiva independientemente del padre, tenemos que usar la propiedad que se llama "Preserve-3d" */
  transform-style: preserve-3d;
}

.flip-card-2 {
  transform-origin: center right;
}

.flip-card-1:hover {
  transform: rotateY(180deg);
}

.flip-card-2:hover {
  transform: translateX(-100%) rotateY(-180deg); /* Atento que el primero es TraNslate y el segundo es rotate. */
}

.flip-card-1 img,
.flip-card-2 img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: 0 50%;
}

.flip-face {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: visible;
  backface-visibility: hidden;
}

.flip-front {
  transform: rotateY(0deg);
}

.flip-back {
  transform: rotateY(180deg);
}

@keyframes MyAwesomeAnimation {
  from {
    opacity: 0;
    transform: translateX(0);
  }

  to {
    opacity: 1;
    transform: translateX(100%);
  }
}

.my-animation {
  /* animation: name(Nombre) duration(Duracion) timing-function(función de temporización) delay(demora) iteration-count(cuantas veces se va a iterar la animacion) direction(direccion de la animacion)
    fill-mode(modo de llenado) play-state(Define estado de la animacion, corriendo o pausado. Se hace mejor con java); */
  animation-name: MyAwesomeAnimation;
  animation-duration: 3s;
  animation-duration: 2s;
  animation-timing-function: cubic-bezier(1, 0, 0, 1);
  animation-timing-function: cubic-bezier(0.4, 0.88, 0.85, 0.25);
  /* https://cubic-bezier.com/#.17,.67,.83,.67 */
  animation-timing-function: ease-in-out;
  animation-delay: 1500ms;
  animation-delay: 0;
  animation-iteration-count: 3;
  animation-iteration-count: infinite;
  animation-iteration-count: 1;
  animation-direction: reverse;
  animation-direction: alternate;
  animation-direction: alternate-reverse;
  animation-direction: normal;
  animation-fill-mode: none;
  /* Forwards: Al final de la animación se queda con los estilos finales de la animación */
  animation-fill-mode: forwards;
  /* Backwards: Al inicio de la animación se queda con los estilos iniciales de la animación */
  animation-fill-mode: backwards;
  /* Both: Aplica al mismo tiempo el valor de Forwards y Backwards. */
  animation-fill-mode: both;
  /* Play state: Con java se saca mejor provecho. */
  animation-play-state: paused;
  animation-play-state: running; /* Por defecto */
  animation: MyAwesomeAnimation 1s;
  animation: MyAwesomeAnimation 1.5s ease 250ms 7 alternate both running;
}

@keyframes myAwesomeAnimation2 {
  0% {
    opacity: 0;
    transform: translateX(0);
  }

  50% {
    opacity: 0.5;
    transform: translateX(-50%);
  }

  75% {
    transform: translateX(-75%);
  }

  100% {
    opacity: 1;
    transform: translateX(100%);
  }
}

.my-animation-2 {
  animation: myAwesomeAnimation2 2s;
  animation: myAwesomeAnimation2 1s;
  animation: myAwesomeAnimation2 5s;
}

/*
Hay propiedades animables, y otras que no:
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties
*/

.animation-multiple {
  animation: multipleAnimation1 2s infinite;
  animation: multipleAnimation2 2s infinite;
  animation: multipleAnimation1 2s infinite, multipleAnimation2 1s 3;
}

.motion-examples {
  text-align: center;
}

@keyframes multipleAnimation1 {
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

@keyframes multipleAnimation2 {
  0% {
    transform: translateY(0);
  }

  50% {
    transform: translateY(-100%);
  }

  100% {
    transform: translateY(0%);
  }
}

@keyframes fadeIn {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

.fade-in {
  font-size: 5vw;
  animation: fadeIn 2s linear 2s infinite alternate both;
}

@keyframes fadeOut {
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
}

.fade-out {
  font-size: 5vw;
  animation: fadeOut 2s linear 2s infinite alternate both;
}

@keyframes shake {
  10%,
  90% {
    transform: translate(-1px, 0px);
  }
  20%,
  80% {
    transform: translate(2px, 0);
  }
  30%,
  50%,
  70% {
    transform: translate(-4px, 0);
  }
  40%,
  60% {
    transform: translate(4px, 0);
  }
}

.shake {
  font-size: 5vw;
  cursor: pointer;
  display: inline-block; /* Para que solo se seleccione arriba de la esponja, y no sobre el block */
}

.shake:hover {
  animation: shake 1s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
  transform: translate(0, 0);
}

@keyframes pulse {
  0% {
    transform: scale(1.1);
  }
  50% {
    transform: scale(0.8);
  }
  100% {
    transform: scale(1);
  }
}

.pulse {
  font-size: 5vw;
  animation: pulse 1s linear infinite;
}

@keyframes heartColor {
  10% {
    background-color: #d00;
  }
}

.heart {
  position: relative;
  margin-left: auto;
  margin-right: auto;
  width: 10vw;
  height: 10vw;
  animation: pulse 1s infinite;
}

.heart::after,
.heart::before {
  position: absolute;
  content: "";
  left: 5vw;
  top: 0;
  width: 5vw;
  height: 8vw;
  background-color: #a00;
  transform: rotate(-45deg);
  transform-origin: 0 100%;
  border-radius: 5vw 5vw 0 0;
  animation: heartColor 1s infinite;
}

.heart::after {
  left: 0;
  transform: rotate(45deg);
  transform-origin: 100% 100%;
}

@keyframes spinner {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

.spinner {
  width: 5vw;
  height: 5vw;
  margin-left: auto;
  margin-right: auto;
  border-radius: 50%;
  border: 0.5vw solid rgba(0, 0, 0, 0.1);
  border-left-color: #09f;
  animation: spinner 1s ease-out infinite;
}

.btn {
  position: relative;
  border: none;
  border-radius: 0.25rem;
  padding: 0.2rem;
  width: 15rem;
  height: 2.5rem;
  font-size: 1.25rem;
  font-weight: bold;
  cursor: pointer;
  overflow: hidden;
  box-shadow: 0.25rem 0.25rem 0.5rem 0.25rem rgba(0, 0, 0, 0.15);
}

.anim-bottom::after {
  content: "";
  position: absolute;
  bottom: 0;
  width: 0;
  height: 0.25rem;
  background-color: #d00;
  transition: width 0.5s ease, left 0.5s ease, right 0.5s ease;
}

.anim-bottom:hover::after {
  width: 100%;
}

.to-left::after {
  left: 0;
}

.to-center::after {
  left: 50%;
}

.to-center:hover::after {
  left: 0%;
}

.to-right::after {
  right: 0;
}

.anim-bg-gradient {
  background-image: linear-gradient(to right, pink, violet, orange, orangered);
  background-size: 300% 100%;
  transition: background-position 0.5s ease-in-out;
}

.anim-bg-gradient:hover {
  background-position: 100% 0;
}

.tabs-menu {
  position: relative;
  margin-left: auto;
  margin-right: auto;
  padding: 1rem;
  border-radius: 1rem;
  width: 70%;
  height: 3rem;
  display: flex; /* Sus elementos hijos pasan a trabajar en fila horizontal */
  justify-content: space-between; /* Controla la alineacion en el eje x. El space-between hace que se reparta el espacio proporcional entre los elementos. */
  align-items: center;
  background-color: #ddd;
}

.tabs-menu input[type="radio"] {
  display: none;
}

.tabs-menu label {
  position: relative;
  z-index: 1;
  width: calc(100% / 4 - 0.5rem);
  text-align: center;
  cursor: pointer;
}

.tabs-menu label:hover {
  color: #fff;
}

.tabs-menu input[type="radio"]:checked + label {
  color: #fff;
}

/* Habiamos dicho que etiquetar con id es un antipatron. Pero cuando queremos este tipo de comportamientos, con clase target, menu de navegacion movil, esta forma de id es util para realizarlos sin Java. */

.tab-bg-hover {
  position: absolute;
  width: calc(100% / 4 - 0.5rem);
  height: 2rem;
  border-radius: 0.5rem;
  background-image: linear-gradient(90deg, #a00, #d00);
  transition: transform 300ms ease-in-out;
}

#tab-1:checked ~ .tab-bg-hover {
  transform: translateX(0);
}

#tab-2:checked ~ .tab-bg-hover {
  transform: translateX(100%);
}

#tab-3:checked ~ .tab-bg-hover {
  transform: translateX(200%);
}

#tab-4:checked ~ .tab-bg-hover {
  transform: translateX(300%);
}

.off-canvas-btn {
  position: fixed;
  bottom: 1rem;
  right: 1rem;
  z-index: 999;
  width: 3rem;
  height: 3rem;
  cursor: pointer;
  /* opacity: 0.25; */
  opacity: 0;
}

.off-canvas-burger {
  position: fixed;
  bottom: 1rem;
  right: 1rem;
  z-index: 998;
  width: 3rem;
  height: 0.6rem;
  background-color: #d00;
  border-radius: 0.3rem;
  transform: rotate(0deg) translate(0, -1.2rem);
  transform-origin: top left;
  transition: transform 0.5s ease, background-color 500ms ease;
}

.off-canvas-burger::before,
.off-canvas-burger::after {
  content: "";
  display: block;
  width: 100%;
  height: 0.6rem;
  border-radius: 0.3rem;
  background-color: #d00;
  transition: transform 500ms ease;
}

.off-canvas-burger::before {
  transform: rotate(0deg) translate(0, -0.9rem);
  /* background-color: blue; */
}

.off-canvas-burger::after {
  transform: rotate(0deg) translate(0, 0.3rem);
  /* background-color: green; */
}

.off-canvas-btn:checked + .off-canvas-burger {
  background-color: transparent;
}

.off-canvas-btn:checked + .off-canvas-burger::before {
  transform: rotate(45deg) translate(0, 0);
}

.off-canvas-btn:checked + .off-canvas-burger::after {
  transform: rotate(-45deg) translate(0.4rem, -0.5rem);
}

.off-canvas-menu {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  z-index: 997;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #0008;
  transition: transform 500ms ease-in-out;
  transform: translate(0, -100%);
  transform: translate(0, 100%);
  transform: translate(0, 100%);
  transform: translate(100%, 0);
  transform: translate(-100%, 0);
}

.off-canvas-btn:checked ~ .off-canvas-menu {
  transform: translate(0, 0);
}

.off-canvas-menu-container {
  width: 100%;
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.off-canvas-link {
  border-bottom: thin solid #d00;
  padding: 2rem;
  font-size: 1.5rem;
  text-align: center;
  text-decoration: none;
  color: #fff;
  transition: background-color 300ms ease;
}

.off-canvas-link:first-child {
  border-top: thin solid #d00;
}

.off-canvas-link:hover {
  background-color: #d005;
}

.modal {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  z-index: 997;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #0008;
  opacity: 0;
  pointer-events: none; /* Esto hace que oculte la posibilidad de tocar los botones ocultos por la opacidad */
  transition: opacity 500ms ease-in-out;
}

.modal:target {
  opacity: 1;
  pointer-events: auto;
}

.modal-container {
  position: relative;
  border: thick double #d00;
  border-radius: 1rem;
  padding: 2rem;
  width: 70%;
  height: 70%;
  display: flex;
  flex-direction: column;
  text-align: left;
  overflow: hidden;
  background-color: white;
}

.modal-close {
  position: absolute;
  top: 1rem;
  right: 1rem;
  width: 3rem;
  height: 3rem;
  border-radius: 50%;
  font-size: 2rem;
  font-weight: bold;
  text-align: center;
  text-decoration: none;
  line-height: 3rem;
  color: white;
  background-color: #d00;
  transition: background-color 300ms linear, transform 300ms ease-in-out;
}

.modal-close:hover {
  background-color: #d00;
  transform: scale(1.2);
}

@keyframes introStarWars {
  0% {
    transform: perspective(100vh) rotateX(15deg) translateY(100%);
  }
  100% {
    transform: perspective(100vh) rotateX(25deg) translateY(-200%);
  }
}

.star-wars {
  margin-left: auto;
  margin-right: auto;
  width: 100%;
  height: 100vh;
  overflow: hidden;
  color: #ffb13a;
  background-image: url("../assets/starfall-gif-20.gif");
}

.star-wars-container {
  margin-left: auto;
  margin-right: auto;
  width: 80%;
  text-align: justify;
  letter-spacing: 0.1rem;
  animation: introStarWars 20s linear infinite;
}

.star-wars h2,
.star-wars h3 {
  font-size: 5vw;
  text-align: center;
}

.star-wars p {
  font-size: 3vw;
  line-height: 4rem;
}
